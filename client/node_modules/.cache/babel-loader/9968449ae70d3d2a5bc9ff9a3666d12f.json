{"ast":null,"code":"/**\n * @remix-run/router v1.14.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1)); // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      } // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n\n\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then, if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\"; // Apply the splat\n\n      return stringify(params[star]);\n    }\n\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref; // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    const value = captureGroups[index];\n\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n    }\n\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n} // Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\n\n\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches); // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else if (isPathRelative) {\n    let fromSegments = routePathnames.length === 0 ? [] : routePathnames[routePathnames.length - 1].replace(/^\\//, \"\").split(\"/\");\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // With relative=\"path\", each leading .. segment means \"go up one URL segment\"\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        fromSegments.pop();\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = \"/\" + fromSegments.join(\"/\");\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // With relative=\"route\" (the default), each leading .. segment means\n      // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n      // difference from how <a href> works and a major reason we call this a\n      // \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    } // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n\n\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\n\n\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\"; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\"; // Config driven behavior flags\n\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    initialized = initialMatches.every(m => m.route.loader && m.route.loader.hydrate !== true && (loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined));\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // Should the current navigation enable document.startViewTransition?\n\n  let pendingViewTransitionEnabled = false; // Store applied view transitions so we can apply them on POP\n\n  let appliedViewTransitions = new Map(); // Cleanup function for persisting applied transitions to sessionStorage\n\n  let removePageHideEventListener = null; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Ref-count mounted fetchers so we know when it's ok to clean them up\n\n  let activeFetchers = new Map(); // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n\n  let deletedFetchers = new Set(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    });\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    } // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    state = _extends({}, state, newState); // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    } // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n\n\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    })); // Remove idle fetchers from state since we only care about in-flight fetchers.\n\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    let blockers = state.blockers;\n\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts; // On POP, enable transitions if they were enabled on the original navigation\n\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    }); // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true; // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n\n\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId; // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since iot's not a \"navigation\"\n\n\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    }); // Proxy navigation abort through to revalidation fetchers\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        updateFetcherState(key, getLoadingFetcher(submission));\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission\n        });\n      }\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n\n      return startRedirectNavigation(state, redirect.result);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds); // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload = // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    let activeSubmission = submission || fetcherSubmission;\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1); // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key); // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n\n    return location.key;\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n\n    get future() {\n      return future;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    get window() {\n      return routerWindow;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Config driven behavior flags\n\n\n  let future = _extends({\n    v7_relativeSplatPath: false\n  }, opts ? opts.future : null);\n\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp3) {\n    let {\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\n\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n\n    for (let match of matches) {\n      contextualMatches.push(match);\n\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  }); // Create a Submission on non-GET navigations\n\n\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (isInitialLoad) {\n      // On initial hydration we don't do any shouldRevalidate stuff - we just\n      // call the unhydrated loaders\n      return isUnhydratedRoute(state, match.route);\n    }\n\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n\n\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n} // Is this route unhydrated (when v7_partialHydration=true) such that we need\n// to call it's loader on the initial router creation\n\n\nfunction isUnhydratedRoute(state, route) {\n  if (!route.loader) {\n    return false;\n  }\n\n  if (route.loader.hydrate) {\n    return true;\n  }\n\n  return state.loaderData[route.id] === undefined && (!state.errors || // Loader ran but errored - don't re-run\n  state.errors[route.id] === undefined);\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, v7_relativeSplatPath, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  let resultType;\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([// If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n\n        if (handlerError) {\n          throw handlerError;\n        }\n\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location, v7_relativeSplatPath);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n\n    let data;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        data = await result.json();\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n\n  return formData;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  } // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n\n\n  return false;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\n\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {// no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","_extends","handlePop","historyState","pushState","error","DOMException","name","assign","origin","invariant","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","fromSegments","toSegments","shift","routePathnameIndex","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","hasLazyRoutes","m","lazy","hasLoaders","loader","errors","hydrate","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","getLoadingNavigation","Request","handleLoaders","fetcherSubmission","getSubmittingNavigation","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp2","redirectLocation","isDocumentReload","reloadDocument","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","convertRouteMatchToUiMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","query","_temp3","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","isRouteRequest","isStaticRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","getResolveToMatches","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","findIndex","isInitialLoad","currentUrl","nextUrl","navigationMatches","isUnhydratedRoute","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","handlerError","protocol","isSameBasename","queryRouteResponse","contentType","isDeferredData","deferred","_result$init","_result$init2","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp5","errorMessage","obj","signals","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"sources":["/Users/zhymas/Desktop/COURSES Work/test/youtube2022/client/node_modules/@remix-run/router/history.ts","/Users/zhymas/Desktop/COURSES Work/test/youtube2022/client/node_modules/@remix-run/router/utils.ts","/Users/zhymas/Desktop/COURSES Work/test/youtube2022/client/node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n  reloadDocument?: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (args: LoaderFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (args: ActionFunctionArgs<Context>):\n    | Promise<DataFunctionValue>\n    | DataFunctionValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)(\\?)?/g, (_: string, paramName: string, isOptional) => {\n        params.push({ paramName, isOptional: isOptional != null });\n        return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else if (isPathRelative) {\n    let fromSegments =\n      routePathnames.length === 0\n        ? []\n        : routePathnames[routePathnames.length - 1]\n            .replace(/^\\//, \"\")\n            .split(\"/\");\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // With relative=\"path\", each leading .. segment means \"go up one URL segment\"\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        fromSegments.pop();\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = \"/\" + fromSegments.join(\"/\");\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // With relative=\"route\" (the default), each leading .. segment means\n      // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n      // difference from how <a href> works and a major reason we call this a\n      // \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  ActionFunction,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  AgnosticRouteObject,\n  DataResult,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  ImmutableRouteKey,\n  LoaderFunction,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    initialized = initialMatches.every(\n      (m) =>\n        m.route.loader &&\n        m.route.loader.hydrate !== true &&\n        ((loaderData && loaderData[m.route.id] !== undefined) ||\n          (errors && errors[m.route.id] !== undefined))\n    );\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors: pendingError || null,\n          ...(pendingActionData ? { actionData: pendingActionData } : {}),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since iot's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData\n            ? Object.keys(actionData).length === 0\n              ? { actionData: null }\n              : { actionData }\n            : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        updateFetcherState(key, getLoadingFetcher(submission));\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission,\n        });\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename,\n      future.v7_relativeSplatPath\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true,\n    });\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        future.v7_relativeSplatPath,\n        { isStaticRequest: true, isRouteRequest, requestContext }\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(\n          `${method}() call aborted: ${request.method} ${request.url}`\n        );\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          future.v7_relativeSplatPath,\n          { isStaticRequest: true, isRouteRequest, requestContext }\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(\n        `${method}() call aborted: ${request.method} ${request.url}`\n      );\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (isInitialLoad) {\n      // On initial hydration we don't do any shouldRevalidate stuff - we just\n      // call the unhydrated loaders\n      return isUnhydratedRoute(state, match.route);\n    }\n\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\n// Is this route unhydrated (when v7_partialHydration=true) such that we need\n// to call it's loader on the initial router creation\nfunction isUnhydratedRoute(state: RouterState, route: AgnosticDataRouteObject) {\n  if (!route.loader) {\n    return false;\n  }\n  if (route.loader.hydrate) {\n    return true;\n  }\n  return (\n    state.loaderData[route.id] === undefined &&\n    (!state.errors ||\n      // Loader ran but errored - don't re-run\n      state.errors[route.id] === undefined)\n  );\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  v7_relativeSplatPath: boolean,\n  opts: {\n    isStaticRequest?: boolean;\n    isRouteRequest?: boolean;\n    requestContext?: unknown;\n  } = {}\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({\n        request,\n        params: match.params,\n        context: opts.requestContext,\n      }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location,\n          v7_relativeSplatPath\n        );\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse: QueryRouteResponse = {\n        type:\n          resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result,\n      };\n      throw queryRouteResponse;\n    }\n\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        data = await result.json();\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || obj.type === ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n"]},"metadata":{},"sourceType":"module"}